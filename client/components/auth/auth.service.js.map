{"version":3,"sources":["../../../client/components/auth/auth.service.js"],"names":[],"mappings":"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","file":"auth.service.js","sourcesContent":["'use strict';\r\n\r\n(function() {\r\n\r\nfunction AuthService($location, $http, $cookies, $q, appConfig, Util, User, toastr) {\r\n  var safeCb = Util.safeCb;\r\n  var currentUser = {};\r\n  var userRoles = appConfig.userRoles || [];\r\n\r\n  if ($cookies.get('token') && $location.path() !== '/logout') {\r\n    currentUser = User.get();\r\n  }\r\n\r\n  var Auth = {\r\n\r\n    /**\r\n     * Authenticate user and save token\r\n     *\r\n     * @param  {Object}   user     - login info\r\n     * @param  {Function} callback - optional, function(error, user)\r\n     * @return {Promise}\r\n     */\r\n    login({email, password}, callback) {\r\n      return $http.post('/auth/local', {\r\n        email: email,\r\n        password: password\r\n      })\r\n        .then(res => {\r\n          $cookies.put('token', res.data.token);\r\n          currentUser = User.get();\r\n          return currentUser.$promise;\r\n        })\r\n        .then(user => {\r\n          safeCb(callback)(null, user);\r\n          toastr.success('Welcome to MEAN online store!', 'Login as '+currentUser.firstname);\r\n          return user;\r\n        })\r\n        .catch(err => {\r\n          Auth.logout();\r\n          safeCb(callback)(err.data);\r\n          toastr.error(err.data.message, 'Error');\r\n          return $q.reject(err.data);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Delete access token and user info\r\n     */\r\n    logout() {\r\n      $cookies.remove('token');\r\n      currentUser = {};\r\n    },\r\n\r\n    /**\r\n     * Create a new user\r\n     *\r\n     * @param  {Object}   user     - user info\r\n     * @param  {Function} callback - optional, function(error, user)\r\n     * @return {Promise}\r\n     */\r\n    createUser(user, callback) {\r\n      return User.save(user,\r\n        function(data) {\r\n          $cookies.put('token', data.token);\r\n          currentUser = User.get();\r\n          toastr.success('Successfully create user');\r\n          return safeCb(callback)(null, user);\r\n        },\r\n        function(err) {\r\n          Auth.logout();\r\n          toastr.error(err.data.name, 'Error in creating user');\r\n          return safeCb(callback)(err);\r\n        }).$promise;\r\n    },\r\n\r\n    /**\r\n     * Change password\r\n     *\r\n     * @param  {String}   oldPassword\r\n     * @param  {String}   newPassword\r\n     * @param  {Function} callback    - optional, function(error, user)\r\n     * @return {Promise}\r\n     */\r\n    changePassword(oldPassword, newPassword, callback) {\r\n      return User.changePassword({ id: currentUser._id }, {\r\n        oldPassword: oldPassword,\r\n        newPassword: newPassword\r\n      }, function() {\r\n        toastr.success('Password successfully changed for ' + currentUser.firstname);\r\n        return safeCb(callback)(null);\r\n      }, function(err) {\r\n        toastr.error(err.data.name, 'Error in changing password');\r\n        return safeCb(callback)(err);\r\n      }).$promise;\r\n    },\r\n\r\n    /**\r\n     * Gets all available info on a user\r\n     *   (synchronous|asynchronous)\r\n     *\r\n     * @param  {Function|*} callback - optional, funciton(user)\r\n     * @return {Object|Promise}\r\n     */\r\n    getCurrentUser(callback) {\r\n      if (arguments.length === 0) {\r\n        return currentUser;\r\n      }\r\n\r\n      var value = (currentUser.hasOwnProperty('$promise')) ?\r\n        currentUser.$promise : currentUser;\r\n      return $q.when(value)\r\n        .then(user => {\r\n          safeCb(callback)(user);\r\n          return user;\r\n        }, () => {\r\n          safeCb(callback)({});\r\n          return {};\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Check if a user is logged in\r\n     *   (synchronous|asynchronous)\r\n     *\r\n     * @param  {Function|*} callback - optional, function(is)\r\n     * @return {Bool|Promise}\r\n     */\r\n    isLoggedIn(callback) {\r\n      if (arguments.length === 0) {\r\n        return currentUser.hasOwnProperty('role');\r\n      }\r\n\r\n      return Auth.getCurrentUser(null)\r\n        .then(user => {\r\n          var is = user.hasOwnProperty('role');\r\n          safeCb(callback)(is);\r\n          return is;\r\n        });\r\n    },\r\n\r\n     /**\r\n      * Check if a user has a specified role or higher\r\n      *   (synchronous|asynchronous)\r\n      *\r\n      * @param  {String}     role     - the role to check against\r\n      * @param  {Function|*} callback - optional, function(has)\r\n      * @return {Bool|Promise}\r\n      */\r\n    hasRole(role, callback) {\r\n      var hasRole = function(r, h) {\r\n        return userRoles.indexOf(r) >= userRoles.indexOf(h);\r\n      };\r\n\r\n      if (arguments.length < 2) {\r\n        return hasRole(currentUser.role, role);\r\n      }\r\n\r\n      return Auth.getCurrentUser(null)\r\n        .then(user => {\r\n          var has = (user.hasOwnProperty('role')) ?\r\n            hasRole(user.role, role) : false;\r\n          safeCb(callback)(has);\r\n          return has;\r\n        });\r\n    },\r\n\r\n     /**\r\n      * Check if a user is an admin\r\n      *   (synchronous|asynchronous)\r\n      *\r\n      * @param  {Function|*} callback - optional, function(is)\r\n      * @return {Bool|Promise}\r\n      */\r\n    isAdmin() {\r\n      return Auth.hasRole\r\n        .apply(Auth, [].concat.apply(['admin'], arguments));\r\n    },\r\n\r\n    /**\r\n     * Get auth token\r\n     *\r\n     * @return {String} - a token string used for authenticating\r\n     */\r\n    getToken() {\r\n      return $cookies.get('token');\r\n    }\r\n  };\r\n\r\n  return Auth;\r\n}\r\n\r\nangular.module('meanonlineshopApp.auth')\r\n  .factory('Auth', AuthService);\r\n\r\n})();\r\n"]}