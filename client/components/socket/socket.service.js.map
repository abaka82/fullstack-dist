{"version":3,"sources":["../../../client/components/socket/socket.service.js"],"names":[],"mappings":";AACA;;AAEA,QAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,QADX,EACqB,UAAS,aAAT,EAAwB;;AAEzC,MAAI,WAAW,GAAG,EAAH,EAAO;;;AAGpB,UAAM,mBAAN;GAHa,CAAX,CAFqC;;AAQzC,MAAI,SAAS,cAAc,EAAE,kBAAF,EAAd,CAAT,CARqC;;AAUzC,SAAO;AACL,kBADK;;;;;;;;;;;;AAaL,sCAAY,WAAW,OAAO,IAAI;AAChC,WAAK,MAAM,QAAQ,IAAR;;;;;AADqB,YAMhC,CAAO,EAAP,CAAU,YAAY,OAAZ,EAAqB,UAAU,IAAV,EAAgB;AAC7C,YAAI,UAAU,EAAE,IAAF,CAAO,KAAP,EAAc,EAAC,KAAK,KAAK,GAAL,EAApB,CAAV,CADyC;AAE7C,YAAI,QAAQ,MAAM,OAAN,CAAc,OAAd,CAAR,CAFyC;AAG7C,YAAI,QAAQ,SAAR;;;;AAHyC,YAOzC,OAAJ,EAAa;AACX,gBAAM,MAAN,CAAa,KAAb,EAAoB,CAApB,EAAuB,IAAvB,EADW;AAEX,kBAAQ,SAAR,CAFW;SAAb,MAGO;AACL,gBAAM,IAAN,CAAW,IAAX,EADK;SAHP;;AAOA,WAAG,KAAH,EAAU,IAAV,EAAgB,KAAhB,EAd6C;OAAhB,CAA/B;;;;;AANgC,YA0BhC,CAAO,EAAP,CAAU,YAAY,SAAZ,EAAuB,UAAU,IAAV,EAAgB;AAC/C,YAAI,QAAQ,SAAR,CAD2C;AAE/C,UAAE,MAAF,CAAS,KAAT,EAAgB,EAAC,KAAK,KAAK,GAAL,EAAtB,EAF+C;AAG/C,WAAG,KAAH,EAAU,IAAV,EAAgB,KAAhB,EAH+C;OAAhB,CAAjC,CA1BgC;KAb7B;;;;;;;;AAmDL,0CAAc,WAAW;AACvB,aAAO,kBAAP,CAA0B,YAAY,OAAZ,CAA1B,CADuB;AAEvB,aAAO,kBAAP,CAA0B,YAAY,SAAZ,CAA1B,CAFuB;KAnDpB;GAAP,CAVyC;CAAxB,CADrB","file":"socket.service.js","sourcesContent":["/* global io */\r\n'use strict';\r\n\r\nangular.module('meanonlineshopApp')\r\n  .factory('socket', function(socketFactory) {\r\n    // socket.io now auto-configures its connection when we ommit a connection url\r\n    var ioSocket = io('', {\r\n      // Send auth token on connection, you will need to DI the Auth service above\r\n      // 'query': 'token=' + Auth.getToken()\r\n      path: '/socket.io-client'\r\n    });\r\n\r\n    var socket = socketFactory({ ioSocket });\r\n\r\n    return {\r\n      socket,\r\n\r\n      /**\r\n       * Register listeners to sync an array with updates on a model\r\n       *\r\n       * Takes the array we want to sync, the model name that socket updates are sent from,\r\n       * and an optional callback function after new items are updated.\r\n       *\r\n       * @param {String} modelName\r\n       * @param {Array} array\r\n       * @param {Function} cb\r\n       */\r\n      syncUpdates(modelName, array, cb) {\r\n        cb = cb || angular.noop;\r\n\r\n        /**\r\n         * Syncs item creation/updates on 'model:save'\r\n         */\r\n        socket.on(modelName + ':save', function (item) {\r\n          var oldItem = _.find(array, {_id: item._id});\r\n          var index = array.indexOf(oldItem);\r\n          var event = 'created';\r\n\r\n          // replace oldItem if it exists\r\n          // otherwise just add item to the collection\r\n          if (oldItem) {\r\n            array.splice(index, 1, item);\r\n            event = 'updated';\r\n          } else {\r\n            array.push(item);\r\n          }\r\n\r\n          cb(event, item, array);\r\n        });\r\n\r\n        /**\r\n         * Syncs removed items on 'model:remove'\r\n         */\r\n        socket.on(modelName + ':remove', function (item) {\r\n          var event = 'deleted';\r\n          _.remove(array, {_id: item._id});\r\n          cb(event, item, array);\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Removes listeners for a models updates on the socket\r\n       *\r\n       * @param modelName\r\n       */\r\n      unsyncUpdates(modelName) {\r\n        socket.removeAllListeners(modelName + ':save');\r\n        socket.removeAllListeners(modelName + ':remove');\r\n      }\r\n    };\r\n  });\r\n"]}