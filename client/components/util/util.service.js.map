{"version":3,"sources":["../../../client/components/util/util.service.js"],"names":[],"mappings":"AAAA;;AAEA,CAAC,YAAW;;;;;AAKZ,WAAS,WAAT,CAAqB,OAArB,EAA8B;AAC5B,QAAI,OAAO;;;;;;;;AAOT,8BAAO,IAAI;AACT,eAAO,OAAC,CAAQ,UAAR,CAAmB,EAAnB,CAAD,GAA2B,EAA3B,GAAgC,QAAQ,IAAR,CAD9B;OAPF;;;;;;;;;AAiBT,kCAAS,KAAK;AACZ,YAAI,IAAI,SAAS,aAAT,CAAuB,GAAvB,CAAJ,CADQ;AAEZ,UAAE,IAAF,GAAS,GAAT;;;AAFY,YAKR,EAAE,IAAF,KAAW,EAAX,EAAe;AACjB,YAAE,IAAF,GAAS,EAAE,IAAF,CADQ;SAAnB;;AAIA,eAAO,CAAP,CATY;OAjBL;;;;;;;;;;AAoCT,0CAAa,KAAK,SAAS;AACzB,cAAM,KAAK,QAAL,CAAc,GAAd,CAAN,CADyB;AAEzB,kBAAU,OAAC,IAAW,GAAG,MAAH,CAAU,OAAV,CAAX,IAAkC,EAAnC,CAFe;AAGzB,kBAAU,QAAQ,GAAR,CAAY,KAAK,QAAL,CAAtB,CAHyB;AAIzB,gBAAQ,IAAR,CAAa,QAAQ,QAAR,CAAb,CAJyB;AAKzB,kBAAU,QAAQ,MAAR,CAAe,UAAS,CAAT,EAAY;AACnC,iBAAO,IAAI,QAAJ,KAAiB,EAAE,QAAF,IACtB,IAAI,IAAJ,KAAa,EAAE,IAAF,IACb,IAAI,QAAJ,KAAiB,EAAE,QAAF,CAHgB;SAAZ,CAAzB,CALyB;AAUzB,eAAQ,QAAQ,MAAR,IAAkB,CAAlB,CAViB;OApClB;KAAP,CADwB;;AAmD5B,WAAO,IAAP,CAnD4B;GAA9B;;AAsDA,UAAQ,MAAR,CAAe,wBAAf,EACG,OADH,CACW,MADX,EACmB,WADnB,EA3DY;CAAX,CAAD","file":"util.service.js","sourcesContent":["'use strict';\r\n\r\n(function() {\r\n\r\n/**\r\n * The Util service is for thin, globally reusable, utility functions\r\n */\r\nfunction UtilService($window) {\r\n  var Util = {\r\n    /**\r\n     * Return a callback or noop function\r\n     *\r\n     * @param  {Function|*} cb - a 'potential' function\r\n     * @return {Function}\r\n     */\r\n    safeCb(cb) {\r\n      return (angular.isFunction(cb)) ? cb : angular.noop;\r\n    },\r\n\r\n    /**\r\n     * Parse a given url with the use of an anchor element\r\n     *\r\n     * @param  {String} url - the url to parse\r\n     * @return {Object}     - the parsed url, anchor element\r\n     */\r\n    urlParse(url) {\r\n      var a = document.createElement('a');\r\n      a.href = url;\r\n\r\n      // Special treatment for IE, see http://stackoverflow.com/a/13405933 for details\r\n      if (a.host === '') {\r\n        a.href = a.href;\r\n      }\r\n\r\n      return a;\r\n    },\r\n\r\n    /**\r\n     * Test whether or not a given url is same origin\r\n     *\r\n     * @param  {String}           url       - url to test\r\n     * @param  {String|String[]}  [origins] - additional origins to test against\r\n     * @return {Boolean}                    - true if url is same origin\r\n     */\r\n    isSameOrigin(url, origins) {\r\n      url = Util.urlParse(url);\r\n      origins = (origins && [].concat(origins)) || [];\r\n      origins = origins.map(Util.urlParse);\r\n      origins.push($window.location);\r\n      origins = origins.filter(function(o) {\r\n        return url.hostname === o.hostname &&\r\n          url.port === o.port &&\r\n          url.protocol === o.protocol;\r\n      });\r\n      return (origins.length >= 1);\r\n    }\r\n  };\r\n\r\n  return Util;\r\n}\r\n\r\nangular.module('meanonlineshopApp.util')\r\n  .factory('Util', UtilService);\r\n\r\n})();\r\n"]}