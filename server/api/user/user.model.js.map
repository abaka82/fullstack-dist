{"version":3,"sources":["../../../../server/api/user/user.model.js"],"names":[],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\r\n\r\nimport crypto from 'crypto';\r\nimport mongoose from 'mongoose';\r\nmongoose.Promise = require('bluebird');\r\nimport {Schema} from 'mongoose';\r\n\r\nvar UserSchema = new Schema({\r\n  firstname: String,\r\n  lastname: String,\r\n  email: {\r\n    type: String,\r\n    lowercase: true\r\n  },\r\n  role: {\r\n    type: String,\r\n    default: 'user'\r\n  },\r\n  password: {\r\n    type: String,\r\n    minlength: 6\r\n  },\r\n  provider: String,\r\n  salt: String\r\n});\r\n\r\n/**\r\n * Virtuals\r\n */\r\n\r\n// Public profile information\r\nUserSchema\r\n  .virtual('profile')\r\n  .get(function() {\r\n    return {\r\n      'name': this.name,\r\n      'role': this.role\r\n    };\r\n  });\r\n\r\n// Non-sensitive info we'll be putting in the token\r\nUserSchema\r\n  .virtual('token')\r\n  .get(function() {\r\n    return {\r\n      '_id': this._id,\r\n      'role': this.role\r\n    };\r\n  });\r\n\r\n/**\r\n * Validations\r\n */\r\n\r\n// Validate empty email\r\nUserSchema\r\n  .path('email')\r\n  .validate(function(email) {\r\n    return email.length;\r\n  }, 'Email cannot be blank');\r\n\r\n// Validate empty password\r\nUserSchema\r\n  .path('password')\r\n  .validate(function(password) {\r\n    return password.length;\r\n  }, 'Password cannot be blank');\r\n\r\n// Validate email is not taken\r\nUserSchema\r\n  .path('email')\r\n  .validate(function(value, respond) {\r\n    var self = this;\r\n    return this.constructor.findOne({ email: value }).exec()\r\n      .then(function(user) {\r\n        if (user) {\r\n          if (self.id === user.id) {\r\n            return respond(true);\r\n          }\r\n          return respond(false);\r\n        }\r\n        return respond(true);\r\n      })\r\n      .catch(function(err) {\r\n        throw err;\r\n      });\r\n  }, 'The specified email address is already in use.');\r\n\r\nvar validatePresenceOf = function(value) {\r\n  return value && value.length;\r\n};\r\n\r\n/**\r\n * Pre-save hook\r\n */\r\nUserSchema\r\n  .pre('save', function(next) {\r\n    // Handle new/update passwords\r\n    if (!this.isModified('password')) {\r\n      return next();\r\n    }\r\n\r\n    if (!validatePresenceOf(this.password)) {\r\n      return next(new Error('Invalid password'));\r\n    }\r\n\r\n    // Make salt with a callback\r\n    this.makeSalt((saltErr, salt) => {\r\n      if (saltErr) {\r\n        return next(saltErr);\r\n      }\r\n      this.salt = salt;\r\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\r\n        if (encryptErr) {\r\n          return next(encryptErr);\r\n        }\r\n        this.password = hashedPassword;\r\n        next();\r\n      });\r\n    });\r\n  });\r\n\r\n/**\r\n * Methods\r\n */\r\nUserSchema.methods = {\r\n  /**\r\n   * Authenticate - check if the passwords are the same\r\n   *\r\n   * @param {String} password\r\n   * @param {Function} callback\r\n   * @return {Boolean}\r\n   * @api public\r\n   */\r\n  authenticate(password, callback) {\r\n    if (!callback) {\r\n      return this.password === this.encryptPassword(password);\r\n    }\r\n\r\n    this.encryptPassword(password, (err, pwdGen) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      if (this.password === pwdGen) {\r\n        callback(null, true);\r\n      } else {\r\n        callback(null, false);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Make salt\r\n   *\r\n   * @param {Number} byteSize Optional salt byte size, default to 16\r\n   * @param {Function} callback\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  makeSalt(byteSize, callback) {\r\n    var defaultByteSize = 16;\r\n\r\n    if (typeof arguments[0] === 'function') {\r\n      callback = arguments[0];\r\n      byteSize = defaultByteSize;\r\n    } else if (typeof arguments[1] === 'function') {\r\n      callback = arguments[1];\r\n    }\r\n\r\n    if (!byteSize) {\r\n      byteSize = defaultByteSize;\r\n    }\r\n\r\n    if (!callback) {\r\n      return crypto.randomBytes(byteSize).toString('base64');\r\n    }\r\n\r\n    return crypto.randomBytes(byteSize, (err, salt) => {\r\n      if (err) {\r\n        callback(err);\r\n      } else {\r\n        callback(null, salt.toString('base64'));\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Encrypt password\r\n   *\r\n   * @param {String} password\r\n   * @param {Function} callback\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  encryptPassword(password, callback) {\r\n    if (!password || !this.salt) {\r\n      return null;\r\n    }\r\n\r\n    var defaultIterations = 10000;\r\n    var defaultKeyLength = 64;\r\n    var salt = new Buffer(this.salt, 'base64');\r\n\r\n    if (!callback) {\r\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\r\n                   .toString('base64');\r\n    }\r\n\r\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, (err, key) => {\r\n      if (err) {\r\n        callback(err);\r\n      } else {\r\n        callback(null, key.toString('base64'));\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default mongoose.model('User', UserSchema);\r\n"]}